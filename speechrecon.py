# -*- coding: utf-8 -*-
"""speechrecon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y96WLKsq-iYVpqtW-OsFdEoopPOokHWM
"""

from re import T
import speech_recognition as sr
#from IPython.display import Audio
from moviepy.editor import *
import os
from moviepy.config import change_settings
from moviepy.video.tools.subtitles import SubtitlesClip
import datetime
import json
from multiprocessing import Pool

def aud_maker(filename):
  wholeclip=VideoFileClip(f"{os.getcwd()}/Video_Chunks/{filename}")
  wholeclip.audio.write_audiofile(os.getcwd()+"/Audio_Chunks/"+f"{filename[:-4]}.wav")

def textmaker(filename):
    f=open("C:\\Users\\User\\Downloads\\focus-sequencer-349414-5be268ea0c65.json")
    GOOGLE_CLOUD_SPEECH_CREDENTIALS =json.dumps(json.loads(f.read()))
    f.close()
    print(GOOGLE_CLOUD_SPEECH_CREDENTIALS)
    r=sr.Recognizer()
    with sr.AudioFile(filename) as source:
        audio_data = r.record(source)
        try :
          text =  r.recognize_google_cloud(audio_data,credentials_json=GOOGLE_CLOUD_SPEECH_CREDENTIALS)
          return text
        except sr.UnknownValueError:
          return "[No Audio]"
        except sr.RequestError as e:
          print("Could not request results from Google Cloud Speech service; {0}".format(e))
          return "We gotta problem"

def sub_maker(filename):
  i=filename[0]
  txtfile=f'{os.getcwd()}/Text_Chunks/{filename[1][:-4]}.txt'
  f=open(txtfile,'w')
  f.write(f'{i+1}\n{str(datetime.timedelta(seconds=i*20))}:00 --> {str(datetime.timedelta(seconds=(i+1)*20))}:00 ')
  #if ((i+1)*20)<endclip_time:
   # f.write(f'{i+1}\n{str(datetime.timedelta(seconds=i*20))}:00 --> {str(datetime.timedelta(seconds=(i+1)*20))}:00 ')
  #else:
    #f.write(f'{i+1}\n{str(datetime.timedelta(seconds=i*20))}:00 --> {str(datetime.timedelta(seconds=endclip_time))} ')
  f.write(textmaker(f"{os.getcwd()}/Audio_Chunks/{filename[1]}")+"\n")
  f.close()

change_settings({"IMAGEMAGICK_BINARY": r"C:\\Program Files\\ImageMagick-7.1.0-Q16-HDRI\\imdisplay.exe"})

def main(filen):

  sub_pool=Pool()
  audio_pool=Pool()
  vidclip=VideoFileClip(filen)#creates video clip object
  filename=filen[:-4]+".wav" 
  vidclip.audio.write_audiofile(filename)#extracts audio and writes the clip as an audio file

  if "Video_Chunks" not in os.listdir() :
    os.mkdir("Video_Chunks")
  else :
    path=os.getcwd()+"/Video_Chunks/"
    for aud in list(filter(lambda x:x.endswith(".mp4"),os.listdir(path))):
      os.remove(path+aud)

  endclip_time=vidclip.end
  print(endclip_time)

  i=0.0
  l="1"
  while i< vidclip.end :
    if i+20<vidclip.end:
      vidclip.subclip(i,i+20).write_videofile(os.getcwd()+"/Video_Chunks/"+f"{filename[:-4]}{l}.mp4")
    else :
      vidclip.subclip(i,vidclip.end).write_videofile(os.getcwd()+"/Video_Chunks/"+f"{filename[:-4]}{l}.mp4")
    i=i+20
    l=l+"1"

  #udio("chmlk.wav")

  vidch=list(filter(lambda x:x.endswith(".mp4"),os.listdir(f'{os.getcwd()}/Video_Chunks/')))

  #filename=input("Your Audio File : ")+".wav"

  if "Audio_Chunks" not in os.listdir() :
    os.mkdir("Audio_Chunks")
  else :
    path=os.getcwd()+"/Audio_Chunks/"
    for aud in list(filter(lambda x:x.endswith(".wav"),os.listdir(path))):
      os.remove(path+aud)


  #def aud_maker(filename):
   # wholeclip=VideoFileClip(filename)
   # wholeclip.write_audiofile(os.getcwd()+"/Audio_Chunks/"+f"{filename[:-4]}.wav")

  audio_pool.map(aud_maker,vidch)

  '''wholeclip=AudioFileClip(filename)
  i=0.0
  l="1"
  while i< wholeclip.end :
    if i+20<wholeclip.end:
      wholeclip.subclip(i,i+20).write_audiofile(os.getcwd()+"/Audio_Chunks/"+f"{filename[:-4]}{l}.wav")
    else :
      wholeclip.subclip(i,wholeclip.end).write_audiofile(os.getcwd()+"/Audio_Chunks/"+f"{filename[:-4]}{l}.wav")
    i=i+20
    l=l+"1"'''

  audch=list(filter(lambda x:x.endswith(".wav"),os.listdir(f'{os.getcwd()}/Audio_Chunks/')))

  audch

  if "Text_Chunks" not in os.listdir() :
    os.mkdir("Text_Chunks")
  else :
    path=os.getcwd()+"/Text_Chunks/"
    for aud in list(filter(lambda x:x.endswith(".txt"),os.listdir(path))):
      os.remove(path+aud)

#  def textmaker(filename):
   # GOOGLE_CLOUD_SPEECH_CREDENTIALS =json.dumps({
  #"type": "service_account",
 # "project_id": "focus-sequencer-349414",
 # "private_key_id": "5be268ea0c6593cf69616f6a932936d03fec96ac",
  #"private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC/jOY5nlSEaccx\nTRIxS2sJQ53D2OEJebD8CHW5s544rnCe/o5xEw14P7fAVoslQrCfzSPen6PZ/qwG\nqsfrBuvKDdPJstR+LbTky9fbkxNMFlXEzNqGoJHu1/bWcK/r0SyOd2XQUBf+h9JT\nIhafsh/VnTogWPCZ7skvFDsi3WwRBIlQSHUpuOWym4jGNn6YkIF6UW3rcZGJi4XX\nbJzj7Pw4JNH5ZPA4RHbgojsRbzHpCvv7uDZwirq78GfRDLCgsTaN01st5duvpbAM\nxVlGGnJr+z5qGjYiHL4Hg94MrXXzGjPe4BkF1evqpIHbtUpWVQPXYWjFMnBxW7mP\ne6oMx9cJAgMBAAECgf8cjrpu3KwSZwgg0Ydk0gRN3UbSwVgg5tj8D5woPh8t/tPL\niygGs6XOclwde3RDRINl+lo0AUOXEeDpHY0F/SzUyDr1rIkBnCQxTYgLtGGsIP2o\nhDdlhYrm5ku8AhDi7MyNG5U8+V6aaVAcv3hKrBkS6oiVSgKU8IS4qst7kdy1VzWJ\nL5mdQHnoqmwhN8xh5sxLJ0rL9QLpApK8t8+SemjENGxjvjSAf/WKlt4IaK0yLNSl\nbiN0dtVRWY8c60hyIQsT0A2kkmmIzvbkcTu2o8gU6HOLCGLEfHP/pgoArq7wOfqC\n/9SiAH1/h250+2jum+7L0emQUvKIeZ7sThVD0icCgYEA8NZVKQWh1BhRUKCFTJIa\nGDzbICv+gg/fZvT0e/fskbFYoRjbN41agJ4HM3DZg0FBO3Ij9froagDWGqBwI22I\n4yXeEhmikdmLpSfgOrfVnNBniNQr15AvRPcEQMVAjHTfBxDBGoBufGrXDUHKtw1g\nRy9o560rpf4W/sAzy3qrjZ8CgYEAy5ww/P307MB28xdWAmZhFBapJvSODz9lzdrt\nL753Cd06tUZE5NvYVh+gHSp4VIUCliM3yrtfizTYDbgGVRfMuxqrvsHQ5IMDsTuZ\nYJXT9ajWj+elEInX3uVV/8IHDZL1TdzNU7aY6nfZG0NMud6grsI5D9j01FoToKnF\nCJT9ilcCgYBTr9a1w3xBTBXtc2n+eoJQy8zE+CSfI07Y4uOVtEfjNIH8sLt0KU06\nhi8wY9Vhc6psMrRmRELAmvvLEtcEqIo5jC4HkhrYnYSV5i5XmQvESvK/LCLz6+lR\nCJjUvPY6GF5rgRno0JoT57hEpgj/5MkA02ubnaQeMRXiff1BhqXYNwKBgQCfcNgL\nxPKe0rhS89suVe1/RZ+AGdGEryiRYvaJhKTC3LK0cSpR7LYj+u/u5usDhITZ/Qob\nf076O49Ubt7Gk7SGcAQ9hJiH2PBzQTCCKdGpdWVPmx3vLYIV0ZDejpnnT0U4i8dd\n3ocwVFl2t+TFSEibkQwOFN7jywXDsi3Q4psIUQKBgQCzpZZiIGbtShQWj1BadJUe\nAj0/I2l6ZWWLKtpMqSCZZbX3vv0QXAoAZhzJDBjLklS0uqjY1179ekEUEoAz1Raj\nJBaWWqGVfo1VIGzH38xVwkr4B0CG0XnpjK1or3JeWNox3kCV3jWGn4v4McCEJaLp\nS11rPlCUAtLnytVfr1NfuA==\n-----END PRIVATE KEY-----\n",
  #"client_email": "nlp-mini-project@focus-sequencer-349414.iam.gserviceaccount.com",
 # "client_id": "116586201895542703215",
 # "auth_uri": "https://accounts.google.com/o/oauth2/auth",
 # "token_uri": "https://oauth2.googleapis.com/token",
 # "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
 # "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/nlp-mini-project%40focus-sequencer-349414.iam.gserviceaccount.com"
#}
#)
   # print(GOOGLE_CLOUD_SPEECH_CREDENTIALS)
   # r=sr.Recognizer()
   # with sr.AudioFile(filename) as source:
    #    audio_data = r.record(source)
    #    try :
    #      text =  r.recognize_google_cloud(audio_data,credentials_json=GOOGLE_CLOUD_SPEECH_CREDENTIALS)
    #      return text
    #    except sr.UnknownValueError:
    #      return "[No Audio]"
    #    except sr.RequestError as e:
    #      print("Could not request results from Google Cloud Speech service; {0}".format(e))
    #      return "We gotta problem"
        #except Exception as e:
          #return "[Unknown]"

  i=0
  #for filename in audch:
  
 # def sub_maker(i,filename):
   # txtfile=f'{os.getcwd()}/Text_Chunks/{filename[:-4]}.txt'
   # f=open(txtfile,'w')
   # if ((i+1)*20)<endclip_time:
    #  f.write(f'{i+1}\n{str(datetime.timedelta(seconds=i*20))}:00 --> {str(datetime.timedelta(seconds=(i+1)*20))}:00 ')
    #else:
    #  f.write(f'{i+1}\n{str(datetime.timedelta(seconds=i*20))}:00 --> {str(datetime.timedelta(seconds=endclip_time))} ')
    #f.write(textmaker(f"{os.getcwd()}/Audio_Chunks/{filename}")+"\n")
   # f.close()
    #i=i+1
  #f=open("mlt.txt",'r')
  #print(f.read())
  #f.close()

  sub_pool.map(sub_maker,list(enumerate(audch)))

  filenames = list(filter(lambda x:x.endswith(".txt"),os.listdir(f'{os.getcwd()}/Text_Chunks/')))
  with open(f'{os.getcwd()}/subtitles.srt', 'w') as outfile:
      for fname in filenames:
          with open(f'{os.getcwd()}/Text_Chunks/{fname}') as infile:
              outfile.write(infile.read())

  return f'{os.getcwd()}/subtitles.srt'

'''if "Sub_Video_Chunks" not in os.listdir() :
    os.mkdir("Sub_Video_Chunks")
  else :
    path=os.getcwd()+"/Sub_Video_Chunks/"
    for aud in list(filter(lambda x:x.endswith(".mp4"),os.listdir(path))):
      os.remove(path+aud)

  for filename in list(filter(lambda x:x.endswith(".txt"),os.listdir(f'{os.getcwd()}/Text_Chunks/'))):
    txtfile=f'{os.getcwd()}/Text_Chunks/{filename}'
    vidfile=f'{os.getcwd()}/Video_Chunks/{filename[:-4]}'
    vidclip=VideoFileClip(vidfile+".mp4")
    f=open(txtfile,'r')
    clip=TextClip(txtfile, font ="Arial-Bold", fontsize = 24, color ="black")
    #clip = lambda txt: TextClip(txt, font ="Arial-Bold", fontsize = 24, color ="black")
    print(txtfile)
    print(clip)
    #clip = SubtitlesClip(txtfile, clip)
    clip = clip.set_pos('bottom').set_duration(vidclip.duration)
    print("Sub Title text created")
    subvidclip = CompositeVideoClip([vidclip,clip])
    print("Subed video clip created")
    subvidclip.write_videofile(os.getcwd()+"/Sub_Video_Chunks/"+f"{filename[:-4]}.mp4")
  # showing  clip  
    #clip.ipython_display()
    f.close()

  fin=[]
  l1=list(filter(lambda x:x.endswith(".mp4"),os.listdir(f'{os.getcwd()}/Sub_Video_Chunks/')))
  l1.sort()
  for filename in l1:
    vidfile=f'{os.getcwd()}/Sub_Video_Chunks/{filename}'
    vidclip=VideoFileClip(vidfile)
    fin.append(vidclip)
  final_clip = concatenate_videoclips(fin)
  final_clip.write_videofile(os.getcwd()+"/subedclip.mp4")
  return os.getcwd()+"/subedclip.mp4"'''

'''l1=list(filter(lambda x:x.endswith(".mp4"),os.listdir(f'{os.getcwd()}/Sub_Video_Chunks/')))
l1.sort()
print(l1)


from moviepy.editor import *

list(filter(lambda x:x.endswith(".txt"),os.listdir(f'{os.getcwd()}/Text_Chunks/')))

#Audio(f"{os.getcwd()}/Audio_Chunks/chmlk2.wav")

"""A little bit about the os module : Its a way to allow python to interact with the operating system especially its file directories.

Note : when files are reffered to by their names in python : they are in the current working directory. ie In the content directory in google colab.

CWD: is also the folder in which python is operating. It starts at '/content' but can be changed using chdir(path string)
"""

import os
os.getcwd()#returns a path string of the cwd.

os.chdir("/content/sample_data")
os.getcwd()

"""Making a directory will make a new folder in our directory net. we take an relative/ absolute path with the foler to be creaed at the end creating a new folder. """

os.mkdir("Geeks")

"""List Dir :- in CWD"""

#os.chdir("/content")
os.listdir()
os.listdir("/content/sample_data")'''

if __name__=='__main__':
  main(input('Enter your filename : '))